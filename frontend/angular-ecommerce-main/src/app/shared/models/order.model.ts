export type OrderStatus =
  | 'NEW' | 'PENDING_PAYMENT' | 'PAID' | 'CANCELLED' | 'SHIPPED' | 'COMPLETED';
export type PaymentMethod = 'COD' | 'VNPAY';
export type PaymentStatus = 'PENDING' | 'PAID' | 'FAILED' | 'REFUNDED';

export interface OrderItem {
  productId: number;        // BE tr·∫£ v·ªÅ productId
  productName: string;      // BE tr·∫£ v·ªÅ productName
  sku?: string;             // BE tr·∫£ v·ªÅ sku
  price: string;            // BigDecimal -> string
  quantity: number;
  lineTotal?: string;       // BigDecimal -> string
}

export interface Payment {
  id?: number;
  method: PaymentMethod;
  status: PaymentStatus;
  provider?: string;        // 'VNPAY' | 'COD' | ...
  amount: string;
  transactionId?: string;
  bankCode?: string;
  paidAt?: string;
  createdAt?: string;
}

export interface Order {
  id: number;

  // üëá ƒë·ªìng b·ªô v·ªõi BE: tr·∫£ ph·∫≥ng user
  userId: number;
  userEmail?: string;
  userFullName?: string;

  subtotal: string;
  discountAmount: string;
  shippingFee: string;
  totalAmount: string;
  couponCode?: string | null;
  status: OrderStatus;
  paymentMethod: PaymentMethod;

  receiverName?: string;
  receiverPhone?: string;
  shipAddressLine1?: string;
  shipAddressLine2?: string;
  shipWard?: string;
  shipDistrict?: string;
  shipCity?: string;
  shipPostalCode?: string;
  shipCountry?: string;

  createdAt?: string;

  items: OrderItem[];
  itemsTotalQuantity?: number;   // BE tr·∫£ t·ªïng SL cho list
  payment?: Payment;
}

/** ===== DTOs checkout ===== */
export interface CheckoutItemInput {
  productId: number;
  quantity: number;
}

export interface CheckoutRequest {
  userId: number;                 // n·∫øu BE l·∫•y t·ª´ token c√≥ th·ªÉ b·ªè field n√†y
  couponCode?: string | null;
  paymentMethod: PaymentMethod;

  receiverName?: string | null;
  receiverPhone?: string | null;
  shipAddressLine1?: string | null;
  shipAddressLine2?: string | null;
  shipWard?: string | null;
  shipDistrict?: string | null;
  shipCity?: string | null;
  shipPostalCode?: string | null;
  shipCountry?: string | null;

  // üëá th√™m ƒë·ªÉ BE t√≠nh ti·ªÅn theo gi·ªè h√†ng
  items: CheckoutItemInput[];
}

export interface CheckoutResponseCod {
  orderId: number;
  status: OrderStatus;
  total: string;
}
export interface CheckoutResponseVnpay {
  orderId: number;
  paymentUrl: string;
}
export type CheckoutResponse = CheckoutResponseCod | CheckoutResponseVnpay;

/** t√≥m t·∫Øt ƒë·ªÉ render list l·ªãch s·ª≠ n·∫øu c·∫ßn */
export interface OrderSummary {
  id: number;
  createdAt?: string;
  totalAmount: string;
  status: OrderStatus;
  paymentMethod: PaymentMethod;
}
